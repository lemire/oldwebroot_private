<?xml version="1.0" encoding="iso-8859-1"?>
<rss version="2.0"><channel><title>bitmapindex</title><link></link><description></description><lastBuildDate>Sun, 01 Mar 2009 03:01:03 GMT</lastBuildDate><generator>PyRSS2Gen-1.0.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title></title><description>&lt;b&gt;...&lt;/b&gt; broader coverage of query optimization than most other texts, along with advanced&lt;br /&gt;
topics including multidimensional and &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt;, distributed transactions &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; B)) o`u vrai(B) est le nombre de valeurs vraies dans un &lt;b&gt;index&lt;/b&gt; &lt;b&gt;bitmap&lt;/b&gt;. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; cardinality attributes. &lt;b&gt;Bitmap&lt;/b&gt; encoding methods are applied to reduce the number&lt;br /&gt;
of &lt;b&gt;bitmaps&lt;/b&gt; used in a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;. Among the different &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; This strategy disassociates the number of &lt;b&gt;bitmaps&lt;/b&gt; from the attribute cardinality&lt;br /&gt;
and allows one to build a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; of a prescribed size, no matter how &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Basically, in the simplest form, the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; is composed of the so-called&lt;br /&gt;
&lt;b&gt;bitmaps&lt;/b&gt;, each of which is a vector of bits (cf. Section &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; structure. This indexing technique achieves high prining power and&lt;br /&gt;
the &lt;b&gt;index&lt;/b&gt; size scales linearly with the database size. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; RELATED WORK Figure 1 shows the simplest possible &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; (BI) for &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; For fast data access by a column with a low cardinality we create a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;&lt;br /&gt;
on this column and order the records in the distances table in accord with the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Virtuoso makes extensive use of &lt;b&gt;bitmap&lt;/b&gt; indices for improving space efficiency[8].&lt;br /&gt;
The &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; means that in the case of OPGS for example, for each &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; The database indexing technology that is best suited for this type of data&lt;br /&gt;
access is known as the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; [11], [12]. The core &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Given n records with c bin boundaries, the basic binned &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; generates&lt;br /&gt;
c &lt;b&gt;bitmaps&lt;/b&gt; with n bits each [19], [23], [24]. Each &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; and nonclustered &lt;b&gt;indexes&lt;/b&gt; but also &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt;, columnar storage &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; To locate fingerprints in a bucket, we maintain an &lt;b&gt;index&lt;/b&gt; &lt;b&gt;bitmap&lt;/b&gt; I. Conceptually,&lt;br /&gt;
I is divided into multiple parts 0101111 1001111 0011001 0101001 7 6 5 4 3 2 1 &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 2. Cost &lt;b&gt;Bitmap&lt;/b&gt; And Node: This routine estimates the overhead of using an &lt;b&gt;index&lt;/b&gt;&lt;br /&gt;
to access a relation. It calculates the cost of retrieving &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; KEY TERMS &lt;b&gt;Bitmap&lt;/b&gt; Join &lt;b&gt;Index&lt;/b&gt;: It is an &lt;b&gt;index&lt;/b&gt;, where the indexed values come&lt;br /&gt;
from one table, but the &lt;b&gt;bitmaps&lt;/b&gt; point to another table. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; A &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;&lt;br /&gt;
solution for original TM/ETM+ image is advanced in this paper. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; A that takes its value from 0, 1, 2, and 3. In this case, we say that the column&lt;br /&gt;
cardinality of A is 4. The basic &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; consists of four &lt;b&gt;bitmaps&lt;/b&gt;, b &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; encoding scheme is to have one &lt;b&gt;bitmap&lt;/b&gt; for each bin. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; requires scan- ning a single &lt;b&gt;bitmap&lt;/b&gt;. Instead, the corresponding k &lt;b&gt;bitmaps&lt;/b&gt; must be&lt;br /&gt;
combined with a bitwise AND. There is a tradeoff between &lt;b&gt;index&lt;/b&gt; size and the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Investigating design choices between &lt;b&gt;Bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; and B-tree &lt;b&gt;index&lt;/b&gt; for a&lt;br /&gt;
large data warehouse system. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 2. HS-&lt;b&gt;BITMAP&lt;/b&gt; &lt;b&gt;INDEX&lt;/b&gt; 2.1 Data Structure Figure 2 shows the hierarchical structure&lt;br /&gt;
of the summary &lt;b&gt;bitmaps&lt;/b&gt; in the HS-&lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;. This &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Optimizing Encoded &lt;b&gt;Bitmap&lt;/b&gt; &lt;b&gt;Index&lt;/b&gt; Using Frequent Itemsets Mining Sainui,&lt;br /&gt;
Janya Vanichayobon, Sirirut Wattanakitrungroj, Niwan. This &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 2008 A New &lt;b&gt;Bitmap&lt;/b&gt; &lt;b&gt;Index&lt;/b&gt; and a New Data Cube Compression Technology &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; ordering techniques and study their effectiveness on the compression ratios of &lt;b&gt;bitmap&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;indexes&lt;/b&gt;. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; They are designed not only to decrease the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; size but also to speed up&lt;br /&gt;
the query execution performance while running the queries over the compressed &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Then, the response time can be reduced in most of situations. Keywords: &lt;b&gt;bitmap&lt;/b&gt; vector,&lt;br /&gt;
data warehouse, disk ac- cess, range-based &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;, response time. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;bitmaps&lt;/b&gt;. Using this idea recursively one gets multi-resolution &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt; [16].&lt;br /&gt;
Though not analyzed in [16] the worst-case space usage of such an &lt;b&gt;index&lt;/b&gt;, &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; After a while a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; would be very helpful. In a run- time adaptable DBMS&lt;br /&gt;
the module for the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; can be installed without stopping the DBMS. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Source descriptions are plotted over the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; in an intelligent and&lt;br /&gt;
improved manner. Despite taking a lot of time in traversing &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Constructing a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; Given L &lt;b&gt;bitmaps&lt;/b&gt; and a table having n rows and c columns,&lt;br /&gt;
we can navely construct a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; in time O(nL) by appending a word &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; A &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; is allocated to each user. For example, a first bit of the &lt;b&gt;bitmap&lt;/b&gt;&lt;br /&gt;
is allocated to a first user, a second bit of the &lt;b&gt;bit&lt;/b&gt; &lt;b&gt;map&lt;/b&gt; is allocated to a &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; with Distributed &lt;b&gt;Bitmap&lt;/b&gt; &lt;b&gt;Indexes&lt;/b&gt; &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; An Efficient XML query processing based on combining T-&lt;b&gt;Bitmap&lt;/b&gt; and &lt;b&gt;index&lt;/b&gt; techniques&lt;br /&gt;
Yin-Fu Huang, Shing-Hang Wang, Graduate School of Computer Science and &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;Bitmaps&lt;/b&gt; are compressed using run-length encoders not only to decrease the &lt;b&gt;bitmap&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;index&lt;/b&gt; size but also to enable efficient query ex- ecution performance while &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; To ensure the existence of such long runs and thus achieve higher compression rate,&lt;br /&gt;
our strategy is, before building the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;, to reorganize the base &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Building L is easy if a &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; is available on attribute A. We first compute&lt;br /&gt;
B P OS , the &lt;b&gt;bitmap&lt;/b&gt; of positive values, by unioning the &lt;b&gt;bitmaps&lt;/b&gt; for values &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; a built in type. &lt;b&gt;Bitmaps&lt;/b&gt; have been used for &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt; supported in DBMS&lt;br /&gt;
like Oracle, DB2, and Sybase. Concept of a &lt;b&gt;bitmap&lt;/b&gt; datatype &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; We then tackle the difference be- tween the &lt;b&gt;bit&lt;/b&gt;-&lt;b&gt;map&lt;/b&gt; and the stack &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Therefore, the physical implementation of the query by PostgreSQL includes the&lt;br /&gt;
following operations: (1) an operator (&lt;b&gt;BITMAP&lt;/b&gt; &lt;b&gt;INDEX&lt;/b&gt; SCAN), Op1, that scans the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;INDEX&lt;/b&gt; JOIN operation is performed and &lt;b&gt;bitmaps&lt;/b&gt; when &lt;b&gt;INDEX&lt;/b&gt; &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; There are plenty of &lt;b&gt;index&lt;/b&gt; types, but in this paper two of them are considered:&lt;br /&gt;
(i) &lt;b&gt;index&lt;/b&gt; B* - tree, and (ii) &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;. 2.2. Table join algorithms &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Given n records with c bin boundaries, the basic binned &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; generates&lt;br /&gt;
c &lt;b&gt;bitmaps&lt;/b&gt; with n bits each [19], [23], [24]. Each &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Hash scheme is employed in DCT group &lt;b&gt;index&lt;/b&gt;. The aggregate DCT &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; quickly&lt;br /&gt;
finds out the DCT that includes the requiring grouping columns. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; the prior art for utilization of &lt;b&gt;bitmaps&lt;/b&gt; during query &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; All resources and user queries are transformed into &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; representation. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;INDEX&lt;/b&gt; TERMS Primary Classification: H. Information Systems H.2 DATABASE MANAGEMENT&lt;br /&gt;
H.2.7 Database Administration Subjects: Data warehouse and repository. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; length of SDSET, we encode all the SDs as &lt;b&gt;bitmaps&lt;/b&gt;. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; posed to a trail disclosure by preventively withdrawing (part of) them from the&lt;br /&gt;
database system (including every trace in the raw data, logs, &lt;b&gt;index&lt;/b&gt;, and memory &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; ex-tract metadata, color and texture information. The &lt;b&gt;Index&lt;/b&gt; Module generates texture&lt;br /&gt;
&lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt; and color region &lt;b&gt;indexes&lt;/b&gt; for web images. The IM2S &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; The first level of this &lt;b&gt;index&lt;/b&gt; structure is a B+- tree. Each leaf entry of this&lt;br /&gt;
B+-tree points to a second-level &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; (see [10] for details). &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; dynamic aspects, this paper proposes a &lt;b&gt;bitmap&lt;/b&gt;-indexing scheme &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; that due to collisions in the hashing of the key to the &lt;b&gt;bitmap&lt;/b&gt; size, it is possible&lt;br /&gt;
for a bit at &lt;b&gt;index&lt;/b&gt; I to be set in multiple partition &lt;b&gt;bitmaps&lt;/b&gt; which results &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;
&lt;br /&gt;&lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;cites=14386321331629521595"&gt;Cit 17fois&lt;/a&gt; - &lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;q=related:u_pmdAd7pscJ:scholar.google.com/"&gt;Autres articles&lt;/a&gt; - &lt;a class="fl" href="http://www.google.com/search?hl=fr&amp;lr=&amp;q=%22Byun%22+%22Purpose+based+access%22"&gt;Recherche sur le Web&lt;/a&gt; - &lt;a class="fl" href="http://discover-decouvrir.cisti-icist.nrc-cnrc.gc.ca/dcvr/ctrl?rfr_id=info:sid/scholar.google.ca&amp;amp;srv_dat=gs_saai&amp;amp;rft_dat=car:470429770&amp;amp;rft.issn=1066-8888&amp;amp;rft.volume=17&amp;amp;rft.issue=4&amp;amp;rft.date=2008&amp;amp;rft.spage=603&amp;amp;rft.jtitle=VLDB%20Journal&amp;amp;rft.atitle=Purpose%20based%20access%20control%20for%20privacy%20protection%20in%20relational%20database%20systems&amp;amp;rft.aulast=Byun&amp;amp;rft.aufirst=Ji-Won&amp;amp;lang=fr" onmousedown="new Image().src='/scholar_url?sa=T&amp;url=http://discover-decouvrir.cisti-icist.nrc-cnrc.gc.ca/dcvr/ctrl%3Frfr_id%3Dinfo:sid/scholar.google.ca%26srv_dat%3Dgs_saai%26rft_dat%3Dcar:470429770%26rft.issn%3D1066-8888%26rft.volume%3D17%26rft.issue%3D4%26rft.date%3D2008%26rft.spage%3D603%26rft.jtitle%3DVLDB%2520Journal%26rft.atitle%3DPurpose%2520based%2520access%2520control%2520for%2520privacy%2520protection%2520in%2520relational%2520database%2520systems%26rft.aulast%3DByun%26rft.aufirst%3DJi-Won%26lang%3Dfr&amp;oi=docdel';"&gt;Obtenir  ICIST&lt;/a&gt; - &lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;cluster=14386321331629521595"&gt;Les 6 versions&lt;/a&gt;&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; any other existing self-&lt;b&gt;index&lt;/b&gt;, with moderate or no slowdown. The other compressed&lt;br /&gt;
&lt;b&gt;bitmap&lt;/b&gt; representations do not achieve this result: the &lt;b&gt;bitmaps&lt;/b&gt; are globally &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; this kind of results is relevant for producing smaller full-text &lt;b&gt;indexes&lt;/b&gt;. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; The attribute encoding gives exactly the (1 out-of N) code. In that context the&lt;br /&gt;
idea of compressing the &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; occurred [11] and [12]. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; N_PDIS can synchronously create two preparative &lt;b&gt;bitmaps&lt;/b&gt; by two &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; to the DBMS on how the data is structured: how it might best be laid down onto disk,&lt;br /&gt;
how queries can be optimised using knowledge of &lt;b&gt;indexes&lt;/b&gt;, row lengths, etc. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 40 &lt;b&gt;bitmap&lt;/b&gt;. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; A two-dimensional &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; is built to detect the ePath contained in documents;&lt;br /&gt;
then, a three- dimensional &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; (BitCube) is built by adding the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;
&lt;br /&gt;&lt;a class="fl" href="http://www.google.com/search?hl=fr&amp;lr=&amp;q=%22Duvaut%22+%22Reduced+symbol+rate%22"&gt;Recherche sur le Web&lt;/a&gt; - &lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;cluster=14727704296829742407"&gt;Les 4 versions&lt;/a&gt;&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; data cube based queries. Thus, in this work for aggregate views, one-attribute&lt;br /&gt;
&lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt; are considered. For each attribute of &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 5, we study indexing techniques for ROLAP cubes using traditional B + -Trees and&lt;br /&gt;
&lt;b&gt;bit&lt;/b&gt;- &lt;b&gt;map&lt;/b&gt; indices, again in the context of the entire cube life- cycle. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title>&amp;nbsp;-Maxminer: A New Maximal Frequent Itemset Mining Algorithm&lt;font size="-1"&gt;&lt;br /&gt;&lt;span class="a"&gt;W Song, B Yang, Z Xu - International Journal on Artificial Intelligence Tools, 2008 - WORLD SCIENTIFIC PUBLISHING&lt;br /&gt;&lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;q=related:APS44sYnAJQJ:scholar.google.com/"&gt;Autres articles </title><description>&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; In order to speed up the query processing, a group &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; is proposed in which&lt;br /&gt;
the group &lt;b&gt;bitmap&lt;/b&gt; key represents a set of items in the database. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Then, before adding any general &lt;b&gt;index&lt;/b&gt; to our configuration, we use this &lt;b&gt;bitmap&lt;/b&gt; to&lt;br /&gt;
make sure that this &lt;b&gt;index&lt;/b&gt; will not be a replication of others already chosen. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; compressed &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; technology called FastBit [32,33] to rapidly identify&lt;br /&gt;
records of interest. Gosink et al. [9] extend the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; An &lt;b&gt;index&lt;/b&gt; called Probabilistic Threshold &lt;b&gt;Index&lt;/b&gt; was proposed in [18] that can be used&lt;br /&gt;
to efficiently execute some classes of probabilistic queries. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Then, by using &lt;b&gt;bitmap&lt;/b&gt;, an algorithm for computing &lt;b&gt;index&lt;/b&gt; array is presented. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 2. EMPLOYING EXTENDIBLE ARRAYS The concept of extendible array we employ will overcome&lt;br /&gt;
problem (1) in Section 1. It is based on the &lt;b&gt;index&lt;/b&gt; array model presented &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Method for Frequent-Update Multi-dimensional Point Data 331 Panfeng Zhou and Betty&lt;br /&gt;
Salzberg Breaking the Curse of Cardinality on &lt;b&gt;Bitmap&lt;/b&gt; &lt;b&gt;Indexes&lt;/b&gt; 348 Kesheng Wu &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; attention &lt;b&gt;index&lt;/b&gt;, and a normal mode &lt;b&gt;bit&lt;/b&gt; &lt;b&gt;map&lt;/b&gt; data for &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; image to produce forest/nonforest &lt;b&gt;bitmap&lt;/b&gt; and 2) postclassifi- cation of the &lt;b&gt;bitmaps&lt;/b&gt;&lt;br /&gt;
by putting decadal tree information into a single-layered binary &lt;b&gt;index&lt;/b&gt; map. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; (15) . []. &amp;gt;&amp;gt;. An efficiently algorithm based on&lt;br /&gt;
itemsets-lattice and &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; for finding frequent itemsets. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; By the structure of &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; and Seqlist table, an effective extension method&lt;br /&gt;
of event and transation is adopted, and effective prune techniques and &amp;quot;And &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Balanced Spatio-Temporal Data Warehouse with R-MVB, STCAT and &lt;b&gt;BITMAP&lt;/b&gt; &lt;b&gt;Indexes&lt;/b&gt;&lt;br /&gt;
[C]// PARELEC&amp;#39;06, 0-7695-2554-7/06 2006 IEEE. USA: IEEE, 2006. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; efficient to pre-process the &lt;b&gt;bitmaps&lt;/b&gt; for different &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; 18, 2008 Sheet 10 of 14 US 7,346,009 B2 NODE &lt;b&gt;INDEX&lt;/b&gt; [N:0] 312 / 604 LEVEL N NODES&lt;br /&gt;
&lt;b&gt;BITMAP&lt;/b&gt; LEVEL N THERMOMETER DECODER 700 MATCH &lt;b&gt;BITMAP&lt;/b&gt; 706 &lt;b&gt;BITMAP&lt;/b&gt; COMPARATOR 702 &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; of sorting nodes and assigning new &lt;b&gt;indexes&lt;/b&gt; is equivalent &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Finally, we present a new dynamic compressed full-text self-&lt;b&gt;index&lt;/b&gt;, for a collection&lt;br /&gt;
of texts over an alphabet of size , of overall length n and hth order &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; file system and the inode and data page &lt;b&gt;bitmaps&lt;/b&gt; are sequences of &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt;) or not. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; As following attributes: a &lt;b&gt;bitmap&lt;/b&gt; pointer, a palette &lt;b&gt;index&lt;/b&gt;, a 20 previously indicated,&lt;br /&gt;
each of these characters may for resolution, a height, and a width. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; so the query mechanisms on the back-end must be improved by efficiently indexing&lt;br /&gt;
the data using tools such as the compressed &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;index&lt;/b&gt; technology [15 &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; A Windows &lt;b&gt;bitmap&lt;/b&gt;-based numerically controlled sculpture method and its application &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; The goals are opposed&lt;br /&gt;
because, to provide fast access, an &lt;b&gt;index&lt;/b&gt; has to be built on the text. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;
&lt;br /&gt;&lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;q=related:2dBsx324mCEJ:scholar.google.com/"&gt;Autres articles&lt;/a&gt; - &lt;a class="fl" href="http://www.google.com/search?hl=fr&amp;lr=&amp;q=%22You%22+%22Alarm+analysis+methods%22"&gt;Recherche sur le Web&lt;/a&gt; - &lt;a class="fl" href="/scholar?num=100&amp;hl=fr&amp;lr=&amp;cluster=2420887650067861721"&gt;Les 4 versions&lt;/a&gt;&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; They define the similarity and popularity oper- ations available in &lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt;&lt;br /&gt;
and propose a method for partitioning a XML document set. Page 3. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; UPPER 16 BITS OF IP SOURCE ADDRESS FIRST-LEVEL EQUIVALENCE SET &lt;b&gt;INDEX&lt;/b&gt; &lt;b&gt;BITMAP&lt;/b&gt; 23 0001&lt;br /&gt;
1 11 01 1 001 1 1 &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; cube based queries. Thus, in this work for ag- gregate views, one-attribute&lt;br /&gt;
&lt;b&gt;bitmap&lt;/b&gt; &lt;b&gt;indexes&lt;/b&gt; are considered. For each attribute of &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Proposed protocol could optimize the size of &lt;b&gt;bitmap&lt;/b&gt; table by applying the deployed&lt;br /&gt;
network property. &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; For example, the data block &lt;b&gt;bit&lt;/b&gt; &lt;b&gt;map&lt;/b&gt; can indicate the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; One implementation organizes the tree &lt;b&gt;bitmap&lt;/b&gt; to minimize the number of internal &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; indicate that the &lt;b&gt;bitmap&lt;/b&gt; compression algorithm for vertical association rules mining&lt;br /&gt;
decreases memory space when the process is running. &lt;b&gt;Index&lt;/b&gt; Terms Available &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; the true struc- ture, here we focused on generating the &lt;b&gt;index&lt;/b&gt; profile from the SEM&lt;br /&gt;
of the PCF cross-section. This involves processing of a &lt;b&gt;bitmap&lt;/b&gt; image of the &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; Furthermore, we employ a &lt;b&gt;bitmap&lt;/b&gt; to indicate the router blocks that are never &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item><item><title></title><description>&lt;b&gt;...&lt;/b&gt; mining algorithm CFI-Stream with bitmapcoding named CLIMB(CLosed Itemset Mining&lt;br /&gt;
with &lt;b&gt;Bitmap&lt;/b&gt;) over stream&amp;#39;s &lt;b&gt;...&lt;/b&gt;</description><guid isPermaLink="true"></guid></item></channel></rss>